import streamlit as st
import pandas as pd
import plotly.express as px
import nltk
from nltk.corpus import stopwords
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import make_pipeline

# Download necessary NLTK resources
nltk.download('punkt')
nltk.download('stopwords')

# Preprocess the text
def preprocess_text(text):
    stop_words = set(stopwords.words('spanish'))
    words = nltk.word_tokenize(text.lower())
    return ' '.join([word for word in words if word.isalnum() and word not in stop_words])

# Function to categorize text using the model
def categorize_text(model, text):
    return model.predict([text])[0]

# Sample training data for real-time and file categorization
train_data = [
    ("Nuevo smartphone lanzado al mercado", "Tecnolog√≠a"),
    ("Equipo de f√∫tbol gana el campeonato", "Deportes"),
    ("Presidente anuncia nuevas medidas econ√≥micas", "Pol√≠tica"),
    ("Estreno de pel√≠cula bate r√©cords de taquilla", "Entretenimiento"),
    ("Bolsa de valores alcanza nuevo m√°ximo hist√≥rico", "Econom√≠a"),
    ("Microsoft lanza nueva versi√≥n de Windows", "Tecnolog√≠a"),
    ("Jugador de baloncesto firma contrato millonario", "Deportes"),
    ("Elecciones presidenciales se llevar√°n a cabo en noviembre", "Pol√≠tica"),
    ("Actor famoso protagoniza nueva serie de televisi√≥n", "Entretenimiento"),
    ("Crecimiento del PIB supera las expectativas", "Econom√≠a"),
    ("Investigadores desarrollan nueva tecnolog√≠a de inteligencia artificial", "Tecnolog√≠a"),
    ("Torneo de tenis comienza esta semana", "Deportes"),
    ("Gobierno aprueba nueva ley de impuestos", "Pol√≠tica"),
    ("Festival de m√∫sica atrae a miles de personas", "Entretenimiento"),
    ("Inflaci√≥n alcanza su nivel m√°s bajo en una d√©cada", "Econom√≠a"),
    ("Apple presenta sus nuevos dispositivos en conferencia anual", "Tecnolog√≠a"),
    ("Equipo de b√©isbol consigue importante victoria", "Deportes"),
    ("Debate presidencial se centra en temas econ√≥micos", "Pol√≠tica"),
    ("Nueva pel√≠cula de superh√©roes es un √©xito en taquilla", "Entretenimiento"),
    ("Mercado de valores muestra signos de recuperaci√≥n", "Econom√≠a"),
    ("Samsung lanza nuevo modelo de smartphone con tecnolog√≠a avanzada", "Tecnolog√≠a"),
    ("Selecci√≥n nacional de f√∫tbol se prepara para el mundial", "Deportes"),
    ("Parlamento discute reformas pol√≠ticas", "Pol√≠tica"),
    ("Festival de cine presenta las mejores pel√≠culas del a√±o", "Entretenimiento"),
    ("Tasa de desempleo cae por tercer mes consecutivo", "Econom√≠a"),
    ("Google desarrolla nuevo algoritmo de b√∫squeda", "Tecnolog√≠a"),
    ("Marat√≥n de la ciudad atrae a corredores de todo el mundo", "Deportes"),
    ("Nuevo ministro de econom√≠a promete reducir la deuda", "Pol√≠tica"),
    ("Serie de televisi√≥n recibe premios internacionales", "Entretenimiento"),
    ("Exportaciones aumentan por quinto mes consecutivo", "Econom√≠a"),
    ("Tesla anuncia avances en conducci√≥n aut√≥noma", "Tecnolog√≠a"),
    ("Equipo de hockey gana el torneo internacional", "Deportes"),
    ("Candidato presidencial promete reformas educativas", "Pol√≠tica"),
    ("Documental sobre la naturaleza es aclamado por la cr√≠tica", "Entretenimiento"),
    ("Inversiones extranjeras crecen en el √∫ltimo trimestre", "Econom√≠a"),
    ("Facebook lanza nueva funcionalidad para empresas", "Tecnolog√≠a"),
    ("Copa del mundo de cricket genera gran expectaci√≥n", "Deportes"),
    ("Protestas en la capital por nuevas pol√≠ticas gubernamentales", "Pol√≠tica"),
    ("Obra de teatro local se convierte en un √©xito", "Entretenimiento"),
    ("Venta de viviendas crece en el √∫ltimo a√±o", "Econom√≠a"),
    ("Huawei introduce nueva l√≠nea de dispositivos m√≥viles", "Tecnolog√≠a"),
    ("Equipo de nataci√≥n rompe r√©cords en campeonato", "Deportes"),
    ("Pol√≠ticos debaten sobre el cambio clim√°tico", "Pol√≠tica"),
    ("Concierto ben√©fico recauda fondos para la caridad", "Entretenimiento"),
    ("Producci√≥n industrial se expande en la regi√≥n", "Econom√≠a"),
    ("IBM desarrolla supercomputadora para investigaci√≥n", "Tecnolog√≠a"),
    ("Campeonato de voleibol atrae a equipos de todo el pa√≠s", "Deportes"),
    ("Parlamento aprueba ley de protecci√≥n ambiental", "Pol√≠tica"),
    ("Pel√≠cula animada recibe excelentes cr√≠ticas", "Entretenimiento"),
    ("Consumo de energ√≠a renovable aumenta significativamente", "Econom√≠a"),
]

# Extract text and labels from training data
X_train, y_train = zip(*train_data)

# Create and train the model
model = make_pipeline(TfidfVectorizer(), MultinomialNB())
model.fit(X_train, y_train)

# Custom CSS for styling
st.markdown("""
    <style>
    .stButton>button {
        background-color: #4CAF50;
        color: white;
        border-radius: 12px;
        padding: 10px 24px;
        margin: 10px 0;
    }
    .stTextInput>div>div>textarea {
        border-radius: 10px;
        border: 1px solid #ddd;
    }
    .reportview-container {
        background-color: #0E1117;
        color: white;
    }
    .result-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 10px;
    }
    </style>
    """, unsafe_allow_html=True)

# Streamlit app layout
st.markdown("<h1 style='text-align: center; color: #FFD700;'>Colombian News Categorization App</h1>", unsafe_allow_html=True)

# Sidebar with Upload
uploaded_file = st.sidebar.file_uploader("Upload CSV File", type=["csv"])

# Date filtering with slider
if uploaded_file is not None:
    news_df = pd.read_csv(uploaded_file)
    news_df['publishedAt'] = pd.to_datetime(news_df['publishedAt'])
    min_date = news_df['publishedAt'].min().date()
    max_date = news_df['publishedAt'].max().date()
    selected_date_range = st.sidebar.slider("Select Date Range", min_date, max_date, (min_date, max_date))

# Real-time news categorization
st.sidebar.subheader("Real-time News Categorization")
real_time_input = st.sidebar.text_area("Enter news content for categorization:")
categorize_button = st.sidebar.button("Categorizeüîç", key="sidebar_button")

if categorize_button and real_time_input:
    with st.spinner('Categorizing...'):
        predicted_category = categorize_text(model, preprocess_text(real_time_input))
        st.sidebar.markdown(f"<div class='result-container'><b>Predicted Category:</b> {predicted_category}</div>", unsafe_allow_html=True)

if uploaded_file is not None:
    # Ensure the dataframe has necessary columns
    if 'content' in news_df.columns and 'title' in news_df.columns and 'publishedAt' in news_df.columns:
        
        # Preprocess text data
        news_df['processed_content'] = news_df['content'].apply(preprocess_text)
        
        # Categorize articles in the dataframe
        news_df['category'] = news_df['processed_content'].apply(lambda x: categorize_text(model, x))
        
        # Filter data based on selected date range
        filtered_df = news_df[
            (news_df['publishedAt'].dt.date >= selected_date_range[0]) &
            (news_df['publishedAt'].dt.date <= selected_date_range[1])
        ]
        
        # Display the filtered dataframe with categories and published date
        st.subheader("Dataframe of Articles with Categoriesüì∞")
        filtered_df = filtered_df.rename(columns={'title': 'Title', 'category': 'Category', 'publishedAt': 'Published Date'})
        st.dataframe(filtered_df[['Title', 'Category', 'Published Date']])
        
        # Bar chart: Distribution of news categories
        st.subheader("Bar Chart: Distribution of News Categories")
        category_distribution = filtered_df['Category'].value_counts()
        fig_bar = px.bar(category_distribution, x=category_distribution.index, y=category_distribution.values, labels={'x': 'Category', 'y': 'Counts'}, title="Distribution of News Categories")
        fig_bar.update_layout(
            hovermode="x",
            title={
                'text': "Distribution of News Categories",
                'y': 0.9,
                'x': 0.5,
                'xanchor': 'center',
                'yanchor': 'top'},
            margin=dict(l=0, r=0, t=30, b=0),
            paper_bgcolor="#0E1117",
            plot_bgcolor="#0E1117",
        )
        st.plotly_chart(fig_bar)
        
        # Interactive time series plot
        if 'Published Date' in filtered_df.columns:
            st.subheader("Interactive Time Series Plot")
            time_series_data = filtered_df.groupby([filtered_df['Published Date'].dt.date, 'Category']).size().reset_index(name='Counts')
            fig_time_series = px.line(time_series_data, x='Published Date', y='Counts', color='Category', title="Time Series of News Categories")
            st.plotly_chart(fig_time_series)
        
    else:
        st.error("CSV must contain 'content', 'title', and 'publishedAt' columns.")
else:
    st.write("Please upload a CSV file to begin.")
